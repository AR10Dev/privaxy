name: Release
on: 
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  clippy_check:
    name: Run clippy check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy
          override: true

      - name: Install gui library packages
        run: sudo apt-get update && sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential libayatana-appindicator3-dev librsvg2-dev libgtk-3-dev libsoup2.4-dev libjavascriptcoregtk-4.0-dev

      - name: Install trunk
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --locked --debug --force trunk

      - name: Install webassembly rust target
        run: rustup target add wasm32-unknown-unknown

      # Required for tailwindcss
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup node and Cache .pnpm-store
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: 'pnpm'
          cache-dependency-path: web_frontend/pnpm-lock.yaml

      - name: Install node packages
        working-directory: ./web_frontend
        run: pnpm i

      # We need to build the web frontend otherwise, we will not be able to compile
      # the server and checks will fail.
      - name: Build web frontend
        run: trunk build
        working-directory: ./web_frontend

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  rustfmt:
    name: Check style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          profile: minimal
          override: true

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  ci:
    name: CI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - build: windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: no_gui-${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build server
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }} --bin privaxy --target-dir target

      - uses: actions/upload-artifact@v3
        if: matrix.os != 'windows-latest'
        with:
          name: privaxy_nogui-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/privaxy

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          name: privaxy_nogui-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/privaxy.exe

  ci_desktop:
    name: CI Desktop
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable
    
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: gui-${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Install trunk
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --locked --debug --force trunk

      - name: Install webassembly rust target
        run: rustup target add wasm32-unknown-unknown

      # Required for tailwindcss
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup node and Cache .pnpm-store
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: 'pnpm'
          cache-dependency-path: web_frontend/pnpm-lock.yaml

      - if: startsWith(matrix.os, 'ubuntu') == true
        name: Install gui library packages
        run: sudo apt-get update && sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential libayatana-appindicator3-dev librsvg2-dev libgtk-3-dev libsoup2.4-dev libjavascriptcoregtk-4.0-dev

      - if: startsWith(matrix.os, 'macos') == true
        name: Install rust apple arm target
        run: rustup target add aarch64-apple-darwin

      - if: startsWith(matrix.os, 'macos') == true
        name: Install apple api key private key
        run: |
          mkdir -p ~/private_keys
          echo "$API_KEY" >> ~/private_keys/AuthKey_"$API_KEY_ID".p8
        shell: bash
        env:
          API_KEY: ${{secrets.APPLE_API_KEY_CONTENTS}}
          API_KEY_ID: ${{secrets.APPLE_API_KEY}}
        
      - name: Install node packages
        working-directory: ./web_frontend
        run: pnpm i
   
      - name: Build 🔧
        id: desktop_app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # the action automatically replaces __VERSION__ with the app version
          tagName: v__VERSION__
          releaseName: 'v__VERSION__'
          releaseDraft: true
          prerelease: false
          tauriScript: 'pnpm'
          args: ${{ startsWith(matrix.os, 'macos') == true && '--target universal-apple-darwin' || '' }}